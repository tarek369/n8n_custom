name: Check n8n Version and Build

on:
  # Run this workflow once a day at 07:39 UTC
  schedule:
    - cron: '39 7 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for signing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¢ Get latest n8n version from NPM
        id: n8n_version
        run: |
          LATEST_VERSION=$(npm view n8n version)
          echo "Latest n8n version is: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"

      - name: üßê Check if image with this version already exists
        id: check_image
        uses: gabe565/setup-crane@v1
        with:
          version: v0.19.1
        run: |
          if crane digest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.n8n_version.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Image with tag ${{ steps.n8n_version.outputs.version }} already exists. No build needed."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "New version ${{ steps.n8n_version.outputs.version }} found! Proceeding to build."
          fi

      - name: üöÄ Build and push Docker image
        if: steps.check_image.outputs.exists == 'false'
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.n8n_version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.n8n_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install cosign
        if: steps.check_image.outputs.exists == 'false'
        uses: sigstore/cosign-installer@v3.5.0

      - name: ‚úçÔ∏è Sign the published Docker image
        if: steps.check_image.outputs.exists == 'false'
        env:
          TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.n8n_version.outputs.version }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: cosign sign --yes "${TAG}@${DIGEST}"

      - name: ‚úÖ Image already up-to-date
        if: steps.check_image.outputs.exists == 'true'
        run: echo "Skipping build as the latest version is already published."
